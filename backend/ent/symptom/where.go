// Code generated by entc, DO NOT EDIT.

package symptom

import (
	"github.com/darksford123x/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SymptomID applies equality check predicate on the "Symptom_ID" field. It's identical to SymptomIDEQ.
func SymptomID(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomID), v))
	})
}

// SymptomName applies equality check predicate on the "Symptom_name" field. It's identical to SymptomNameEQ.
func SymptomName(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomName), v))
	})
}

// SymptomIDEQ applies the EQ predicate on the "Symptom_ID" field.
func SymptomIDEQ(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomID), v))
	})
}

// SymptomIDNEQ applies the NEQ predicate on the "Symptom_ID" field.
func SymptomIDNEQ(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptomID), v))
	})
}

// SymptomIDIn applies the In predicate on the "Symptom_ID" field.
func SymptomIDIn(vs ...int) predicate.Symptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptomID), v...))
	})
}

// SymptomIDNotIn applies the NotIn predicate on the "Symptom_ID" field.
func SymptomIDNotIn(vs ...int) predicate.Symptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptomID), v...))
	})
}

// SymptomIDGT applies the GT predicate on the "Symptom_ID" field.
func SymptomIDGT(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptomID), v))
	})
}

// SymptomIDGTE applies the GTE predicate on the "Symptom_ID" field.
func SymptomIDGTE(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptomID), v))
	})
}

// SymptomIDLT applies the LT predicate on the "Symptom_ID" field.
func SymptomIDLT(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptomID), v))
	})
}

// SymptomIDLTE applies the LTE predicate on the "Symptom_ID" field.
func SymptomIDLTE(v int) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptomID), v))
	})
}

// SymptomNameEQ applies the EQ predicate on the "Symptom_name" field.
func SymptomNameEQ(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomName), v))
	})
}

// SymptomNameNEQ applies the NEQ predicate on the "Symptom_name" field.
func SymptomNameNEQ(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptomName), v))
	})
}

// SymptomNameIn applies the In predicate on the "Symptom_name" field.
func SymptomNameIn(vs ...string) predicate.Symptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptomName), v...))
	})
}

// SymptomNameNotIn applies the NotIn predicate on the "Symptom_name" field.
func SymptomNameNotIn(vs ...string) predicate.Symptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Symptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptomName), v...))
	})
}

// SymptomNameGT applies the GT predicate on the "Symptom_name" field.
func SymptomNameGT(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptomName), v))
	})
}

// SymptomNameGTE applies the GTE predicate on the "Symptom_name" field.
func SymptomNameGTE(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptomName), v))
	})
}

// SymptomNameLT applies the LT predicate on the "Symptom_name" field.
func SymptomNameLT(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptomName), v))
	})
}

// SymptomNameLTE applies the LTE predicate on the "Symptom_name" field.
func SymptomNameLTE(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptomName), v))
	})
}

// SymptomNameContains applies the Contains predicate on the "Symptom_name" field.
func SymptomNameContains(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymptomName), v))
	})
}

// SymptomNameHasPrefix applies the HasPrefix predicate on the "Symptom_name" field.
func SymptomNameHasPrefix(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymptomName), v))
	})
}

// SymptomNameHasSuffix applies the HasSuffix predicate on the "Symptom_name" field.
func SymptomNameHasSuffix(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymptomName), v))
	})
}

// SymptomNameEqualFold applies the EqualFold predicate on the "Symptom_name" field.
func SymptomNameEqualFold(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymptomName), v))
	})
}

// SymptomNameContainsFold applies the ContainsFold predicate on the "Symptom_name" field.
func SymptomNameContainsFold(v string) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymptomName), v))
	})
}

// HasSymptoms applies the HasEdge predicate on the "symptoms" edge.
func HasSymptoms() predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SymptomsTable, SymptomsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymptomsWith applies the HasEdge predicate on the "symptoms" edge with a given conditions (other predicates).
func HasSymptomsWith(preds ...predicate.RepairInvoice) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SymptomsTable, SymptomsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Symptom) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Symptom) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Symptom) predicate.Symptom {
	return predicate.Symptom(func(s *sql.Selector) {
		p(s.Not())
	})
}
