// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/darksford123x/app/ent/device"
	"github.com/darksford123x/app/ent/repairinvoice"
	"github.com/facebookincubator/ent/dialect/sql"
)

// RepairInvoice is the model entity for the RepairInvoice schema.
type RepairInvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RepairInvoiceID holds the value of the "RepairInvoice_ID" field.
	RepairInvoiceID int `json:"RepairInvoice_ID,omitempty"`
	// StatusID holds the value of the "Status_ID" field.
	StatusID int `json:"Status_ID,omitempty"`
	// DeviceID holds the value of the "Device_ID" field.
	DeviceID int `json:"Device_ID,omitempty"`
	// SymptomID holds the value of the "Symptom_ID" field.
	SymptomID int `json:"Symptom_ID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepairInvoiceQuery when eager-loading is set.
	Edges          RepairInvoiceEdges `json:"edges"`
	device_devices *int
}

// RepairInvoiceEdges holds the relations/edges for other nodes in the graph.
type RepairInvoiceEdges struct {
	// Device holds the value of the device edge.
	Device *Device
	// Statusinvoice holds the value of the statusinvoice edge.
	Statusinvoice []*Status
	// Symptom holds the value of the symptom edge.
	Symptom []*Symptom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepairInvoiceEdges) DeviceOrErr() (*Device, error) {
	if e.loadedTypes[0] {
		if e.Device == nil {
			// The edge device was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: device.Label}
		}
		return e.Device, nil
	}
	return nil, &NotLoadedError{edge: "device"}
}

// StatusinvoiceOrErr returns the Statusinvoice value or an error if the edge
// was not loaded in eager-loading.
func (e RepairInvoiceEdges) StatusinvoiceOrErr() ([]*Status, error) {
	if e.loadedTypes[1] {
		return e.Statusinvoice, nil
	}
	return nil, &NotLoadedError{edge: "statusinvoice"}
}

// SymptomOrErr returns the Symptom value or an error if the edge
// was not loaded in eager-loading.
func (e RepairInvoiceEdges) SymptomOrErr() ([]*Symptom, error) {
	if e.loadedTypes[2] {
		return e.Symptom, nil
	}
	return nil, &NotLoadedError{edge: "symptom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RepairInvoice) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // RepairInvoice_ID
		&sql.NullInt64{}, // Status_ID
		&sql.NullInt64{}, // Device_ID
		&sql.NullInt64{}, // Symptom_ID
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*RepairInvoice) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // device_devices
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RepairInvoice fields.
func (ri *RepairInvoice) assignValues(values ...interface{}) error {
	if m, n := len(values), len(repairinvoice.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ri.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field RepairInvoice_ID", values[0])
	} else if value.Valid {
		ri.RepairInvoiceID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Status_ID", values[1])
	} else if value.Valid {
		ri.StatusID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Device_ID", values[2])
	} else if value.Valid {
		ri.DeviceID = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Symptom_ID", values[3])
	} else if value.Valid {
		ri.SymptomID = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(repairinvoice.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field device_devices", value)
		} else if value.Valid {
			ri.device_devices = new(int)
			*ri.device_devices = int(value.Int64)
		}
	}
	return nil
}

// QueryDevice queries the device edge of the RepairInvoice.
func (ri *RepairInvoice) QueryDevice() *DeviceQuery {
	return (&RepairInvoiceClient{config: ri.config}).QueryDevice(ri)
}

// QueryStatusinvoice queries the statusinvoice edge of the RepairInvoice.
func (ri *RepairInvoice) QueryStatusinvoice() *StatusQuery {
	return (&RepairInvoiceClient{config: ri.config}).QueryStatusinvoice(ri)
}

// QuerySymptom queries the symptom edge of the RepairInvoice.
func (ri *RepairInvoice) QuerySymptom() *SymptomQuery {
	return (&RepairInvoiceClient{config: ri.config}).QuerySymptom(ri)
}

// Update returns a builder for updating this RepairInvoice.
// Note that, you need to call RepairInvoice.Unwrap() before calling this method, if this RepairInvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RepairInvoice) Update() *RepairInvoiceUpdateOne {
	return (&RepairInvoiceClient{config: ri.config}).UpdateOne(ri)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ri *RepairInvoice) Unwrap() *RepairInvoice {
	tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RepairInvoice is not a transactional entity")
	}
	ri.config.driver = tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RepairInvoice) String() string {
	var builder strings.Builder
	builder.WriteString("RepairInvoice(")
	builder.WriteString(fmt.Sprintf("id=%v", ri.ID))
	builder.WriteString(", RepairInvoice_ID=")
	builder.WriteString(fmt.Sprintf("%v", ri.RepairInvoiceID))
	builder.WriteString(", Status_ID=")
	builder.WriteString(fmt.Sprintf("%v", ri.StatusID))
	builder.WriteString(", Device_ID=")
	builder.WriteString(fmt.Sprintf("%v", ri.DeviceID))
	builder.WriteString(", Symptom_ID=")
	builder.WriteString(fmt.Sprintf("%v", ri.SymptomID))
	builder.WriteByte(')')
	return builder.String()
}

// RepairInvoices is a parsable slice of RepairInvoice.
type RepairInvoices []*RepairInvoice

func (ri RepairInvoices) config(cfg config) {
	for _i := range ri {
		ri[_i].config = cfg
	}
}
