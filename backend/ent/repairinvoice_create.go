// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/darksford123x/app/ent/device"
	"github.com/darksford123x/app/ent/repairinvoice"
	"github.com/darksford123x/app/ent/status"
	"github.com/darksford123x/app/ent/symptom"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RepairInvoiceCreate is the builder for creating a RepairInvoice entity.
type RepairInvoiceCreate struct {
	config
	mutation *RepairInvoiceMutation
	hooks    []Hook
}

// SetRepairInvoiceID sets the RepairInvoice_ID field.
func (ric *RepairInvoiceCreate) SetRepairInvoiceID(i int) *RepairInvoiceCreate {
	ric.mutation.SetRepairInvoiceID(i)
	return ric
}

// SetStatusID sets the Status_ID field.
func (ric *RepairInvoiceCreate) SetStatusID(i int) *RepairInvoiceCreate {
	ric.mutation.SetStatusID(i)
	return ric
}

// SetDeviceID sets the Device_ID field.
func (ric *RepairInvoiceCreate) SetDeviceID(i int) *RepairInvoiceCreate {
	ric.mutation.SetDeviceID(i)
	return ric
}

// SetSymptomID sets the Symptom_ID field.
func (ric *RepairInvoiceCreate) SetSymptomID(i int) *RepairInvoiceCreate {
	ric.mutation.SetSymptomID(i)
	return ric
}

// SetDeviceID sets the device edge to Device by id.
func (ric *RepairInvoiceCreate) SetDeviceID(id int) *RepairInvoiceCreate {
	ric.mutation.SetDeviceID(id)
	return ric
}

// SetDevice sets the device edge to Device.
func (ric *RepairInvoiceCreate) SetDevice(d *Device) *RepairInvoiceCreate {
	return ric.SetDeviceID(d.ID)
}

// AddStatusinvoiceIDs adds the statusinvoice edge to Status by ids.
func (ric *RepairInvoiceCreate) AddStatusinvoiceIDs(ids ...int) *RepairInvoiceCreate {
	ric.mutation.AddStatusinvoiceIDs(ids...)
	return ric
}

// AddStatusinvoice adds the statusinvoice edges to Status.
func (ric *RepairInvoiceCreate) AddStatusinvoice(s ...*Status) *RepairInvoiceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ric.AddStatusinvoiceIDs(ids...)
}

// AddSymptomIDs adds the symptom edge to Symptom by ids.
func (ric *RepairInvoiceCreate) AddSymptomIDs(ids ...int) *RepairInvoiceCreate {
	ric.mutation.AddSymptomIDs(ids...)
	return ric
}

// AddSymptom adds the symptom edges to Symptom.
func (ric *RepairInvoiceCreate) AddSymptom(s ...*Symptom) *RepairInvoiceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ric.AddSymptomIDs(ids...)
}

// Mutation returns the RepairInvoiceMutation object of the builder.
func (ric *RepairInvoiceCreate) Mutation() *RepairInvoiceMutation {
	return ric.mutation
}

// Save creates the RepairInvoice in the database.
func (ric *RepairInvoiceCreate) Save(ctx context.Context) (*RepairInvoice, error) {
	if _, ok := ric.mutation.RepairInvoiceID(); !ok {
		return nil, &ValidationError{Name: "RepairInvoice_ID", err: errors.New("ent: missing required field \"RepairInvoice_ID\"")}
	}
	if _, ok := ric.mutation.StatusID(); !ok {
		return nil, &ValidationError{Name: "Status_ID", err: errors.New("ent: missing required field \"Status_ID\"")}
	}
	if _, ok := ric.mutation.DeviceID(); !ok {
		return nil, &ValidationError{Name: "Device_ID", err: errors.New("ent: missing required field \"Device_ID\"")}
	}
	if _, ok := ric.mutation.SymptomID(); !ok {
		return nil, &ValidationError{Name: "Symptom_ID", err: errors.New("ent: missing required field \"Symptom_ID\"")}
	}
	if _, ok := ric.mutation.DeviceID(); !ok {
		return nil, &ValidationError{Name: "device", err: errors.New("ent: missing required edge \"device\"")}
	}
	var (
		err  error
		node *RepairInvoice
	)
	if len(ric.hooks) == 0 {
		node, err = ric.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RepairInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ric.mutation = mutation
			node, err = ric.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ric.hooks) - 1; i >= 0; i-- {
			mut = ric.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ric.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RepairInvoiceCreate) SaveX(ctx context.Context) *RepairInvoice {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ric *RepairInvoiceCreate) sqlSave(ctx context.Context) (*RepairInvoice, error) {
	ri, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ri.ID = int(id)
	return ri, nil
}

func (ric *RepairInvoiceCreate) createSpec() (*RepairInvoice, *sqlgraph.CreateSpec) {
	var (
		ri    = &RepairInvoice{config: ric.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repairinvoice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: repairinvoice.FieldID,
			},
		}
	)
	if value, ok := ric.mutation.RepairInvoiceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldRepairInvoiceID,
		})
		ri.RepairInvoiceID = value
	}
	if value, ok := ric.mutation.StatusID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldStatusID,
		})
		ri.StatusID = value
	}
	if value, ok := ric.mutation.DeviceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldDeviceID,
		})
		ri.DeviceID = value
	}
	if value, ok := ric.mutation.SymptomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: repairinvoice.FieldSymptomID,
		})
		ri.SymptomID = value
	}
	if nodes := ric.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   repairinvoice.DeviceTable,
			Columns: []string{repairinvoice.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.StatusinvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repairinvoice.StatusinvoiceTable,
			Columns: repairinvoice.StatusinvoicePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ric.mutation.SymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   repairinvoice.SymptomTable,
			Columns: repairinvoice.SymptomPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: symptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ri, _spec
}
