// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/darksford123x/app/ent/device"
	"github.com/darksford123x/app/ent/predicate"
	"github.com/darksford123x/app/ent/repairinvoice"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks      []Hook
	mutation   *DeviceMutation
	predicates []predicate.Device
}

// Where adds a new predicate for the builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDeviceID sets the Device_ID field.
func (du *DeviceUpdate) SetDeviceID(i int) *DeviceUpdate {
	du.mutation.ResetDeviceID()
	du.mutation.SetDeviceID(i)
	return du
}

// AddDeviceID adds i to Device_ID.
func (du *DeviceUpdate) AddDeviceID(i int) *DeviceUpdate {
	du.mutation.AddDeviceID(i)
	return du
}

// SetCustomerID sets the Customer_ID field.
func (du *DeviceUpdate) SetCustomerID(i int) *DeviceUpdate {
	du.mutation.ResetCustomerID()
	du.mutation.SetCustomerID(i)
	return du
}

// AddCustomerID adds i to Customer_ID.
func (du *DeviceUpdate) AddCustomerID(i int) *DeviceUpdate {
	du.mutation.AddCustomerID(i)
	return du
}

// SetDevicesID sets the devices edge to RepairInvoice by id.
func (du *DeviceUpdate) SetDevicesID(id int) *DeviceUpdate {
	du.mutation.SetDevicesID(id)
	return du
}

// SetNillableDevicesID sets the devices edge to RepairInvoice by id if the given value is not nil.
func (du *DeviceUpdate) SetNillableDevicesID(id *int) *DeviceUpdate {
	if id != nil {
		du = du.SetDevicesID(*id)
	}
	return du
}

// SetDevices sets the devices edge to RepairInvoice.
func (du *DeviceUpdate) SetDevices(r *RepairInvoice) *DeviceUpdate {
	return du.SetDevicesID(r.ID)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearDevices clears the devices edge to RepairInvoice.
func (du *DeviceUpdate) ClearDevices() *DeviceUpdate {
	du.mutation.ClearDevices()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeviceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceID,
		})
	}
	if value, ok := du.mutation.AddedDeviceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceID,
		})
	}
	if value, ok := du.mutation.CustomerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldCustomerID,
		})
	}
	if value, ok := du.mutation.AddedCustomerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldCustomerID,
		})
	}
	if du.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   device.DevicesTable,
			Columns: []string{device.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   device.DevicesTable,
			Columns: []string{device.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// SetDeviceID sets the Device_ID field.
func (duo *DeviceUpdateOne) SetDeviceID(i int) *DeviceUpdateOne {
	duo.mutation.ResetDeviceID()
	duo.mutation.SetDeviceID(i)
	return duo
}

// AddDeviceID adds i to Device_ID.
func (duo *DeviceUpdateOne) AddDeviceID(i int) *DeviceUpdateOne {
	duo.mutation.AddDeviceID(i)
	return duo
}

// SetCustomerID sets the Customer_ID field.
func (duo *DeviceUpdateOne) SetCustomerID(i int) *DeviceUpdateOne {
	duo.mutation.ResetCustomerID()
	duo.mutation.SetCustomerID(i)
	return duo
}

// AddCustomerID adds i to Customer_ID.
func (duo *DeviceUpdateOne) AddCustomerID(i int) *DeviceUpdateOne {
	duo.mutation.AddCustomerID(i)
	return duo
}

// SetDevicesID sets the devices edge to RepairInvoice by id.
func (duo *DeviceUpdateOne) SetDevicesID(id int) *DeviceUpdateOne {
	duo.mutation.SetDevicesID(id)
	return duo
}

// SetNillableDevicesID sets the devices edge to RepairInvoice by id if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableDevicesID(id *int) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetDevicesID(*id)
	}
	return duo
}

// SetDevices sets the devices edge to RepairInvoice.
func (duo *DeviceUpdateOne) SetDevices(r *RepairInvoice) *DeviceUpdateOne {
	return duo.SetDevicesID(r.ID)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearDevices clears the devices edge to RepairInvoice.
func (duo *DeviceUpdateOne) ClearDevices() *DeviceUpdateOne {
	duo.mutation.ClearDevices()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {

	var (
		err  error
		node *Device
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (d *Device, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   device.Table,
			Columns: device.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: device.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Device.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.DeviceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceID,
		})
	}
	if value, ok := duo.mutation.AddedDeviceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldDeviceID,
		})
	}
	if value, ok := duo.mutation.CustomerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldCustomerID,
		})
	}
	if value, ok := duo.mutation.AddedCustomerID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: device.FieldCustomerID,
		})
	}
	if duo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   device.DevicesTable,
			Columns: []string{device.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   device.DevicesTable,
			Columns: []string{device.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairinvoice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Device{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
