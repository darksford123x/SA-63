// Code generated by entc, DO NOT EDIT.

package repairinvoice

import (
	"github.com/darksford123x/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RepairInvoiceID applies equality check predicate on the "RepairInvoice_ID" field. It's identical to RepairInvoiceIDEQ.
func RepairInvoiceID(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepairInvoiceID), v))
	})
}

// StatusID applies equality check predicate on the "Status_ID" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// DeviceID applies equality check predicate on the "Device_ID" field. It's identical to DeviceIDEQ.
func DeviceID(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// SymptomID applies equality check predicate on the "Symptom_ID" field. It's identical to SymptomIDEQ.
func SymptomID(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomID), v))
	})
}

// RepairInvoiceIDEQ applies the EQ predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepairInvoiceID), v))
	})
}

// RepairInvoiceIDNEQ applies the NEQ predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDNEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepairInvoiceID), v))
	})
}

// RepairInvoiceIDIn applies the In predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepairInvoiceID), v...))
	})
}

// RepairInvoiceIDNotIn applies the NotIn predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDNotIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepairInvoiceID), v...))
	})
}

// RepairInvoiceIDGT applies the GT predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDGT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepairInvoiceID), v))
	})
}

// RepairInvoiceIDGTE applies the GTE predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDGTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepairInvoiceID), v))
	})
}

// RepairInvoiceIDLT applies the LT predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDLT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepairInvoiceID), v))
	})
}

// RepairInvoiceIDLTE applies the LTE predicate on the "RepairInvoice_ID" field.
func RepairInvoiceIDLTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepairInvoiceID), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "Status_ID" field.
func StatusIDEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "Status_ID" field.
func StatusIDNEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "Status_ID" field.
func StatusIDIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "Status_ID" field.
func StatusIDNotIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "Status_ID" field.
func StatusIDGT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "Status_ID" field.
func StatusIDGTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "Status_ID" field.
func StatusIDLT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "Status_ID" field.
func StatusIDLTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// DeviceIDEQ applies the EQ predicate on the "Device_ID" field.
func DeviceIDEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDNEQ applies the NEQ predicate on the "Device_ID" field.
func DeviceIDNEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceID), v))
	})
}

// DeviceIDIn applies the In predicate on the "Device_ID" field.
func DeviceIDIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDNotIn applies the NotIn predicate on the "Device_ID" field.
func DeviceIDNotIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceID), v...))
	})
}

// DeviceIDGT applies the GT predicate on the "Device_ID" field.
func DeviceIDGT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDGTE applies the GTE predicate on the "Device_ID" field.
func DeviceIDGTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLT applies the LT predicate on the "Device_ID" field.
func DeviceIDLT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceID), v))
	})
}

// DeviceIDLTE applies the LTE predicate on the "Device_ID" field.
func DeviceIDLTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceID), v))
	})
}

// SymptomIDEQ applies the EQ predicate on the "Symptom_ID" field.
func SymptomIDEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptomID), v))
	})
}

// SymptomIDNEQ applies the NEQ predicate on the "Symptom_ID" field.
func SymptomIDNEQ(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptomID), v))
	})
}

// SymptomIDIn applies the In predicate on the "Symptom_ID" field.
func SymptomIDIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptomID), v...))
	})
}

// SymptomIDNotIn applies the NotIn predicate on the "Symptom_ID" field.
func SymptomIDNotIn(vs ...int) predicate.RepairInvoice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RepairInvoice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptomID), v...))
	})
}

// SymptomIDGT applies the GT predicate on the "Symptom_ID" field.
func SymptomIDGT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptomID), v))
	})
}

// SymptomIDGTE applies the GTE predicate on the "Symptom_ID" field.
func SymptomIDGTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptomID), v))
	})
}

// SymptomIDLT applies the LT predicate on the "Symptom_ID" field.
func SymptomIDLT(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptomID), v))
	})
}

// SymptomIDLTE applies the LTE predicate on the "Symptom_ID" field.
func SymptomIDLTE(v int) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptomID), v))
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeviceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusinvoice applies the HasEdge predicate on the "statusinvoice" edge.
func HasStatusinvoice() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusinvoiceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StatusinvoiceTable, StatusinvoicePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusinvoiceWith applies the HasEdge predicate on the "statusinvoice" edge with a given conditions (other predicates).
func HasStatusinvoiceWith(preds ...predicate.Status) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusinvoiceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StatusinvoiceTable, StatusinvoicePrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSymptom applies the HasEdge predicate on the "symptom" edge.
func HasSymptom() predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SymptomTable, SymptomPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSymptomWith applies the HasEdge predicate on the "symptom" edge with a given conditions (other predicates).
func HasSymptomWith(preds ...predicate.Symptom) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SymptomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SymptomTable, SymptomPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RepairInvoice) predicate.RepairInvoice {
	return predicate.RepairInvoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
